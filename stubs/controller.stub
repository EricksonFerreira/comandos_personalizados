<?php

namespace App\Http\Controllers;

use App\Http\Controllers\Interfaces\FiltroInterface;
use App\Http\Controllers\Interfaces\ResourceInterface;
use App\Http\Requests\{{model}}\Store{{model}}Request;
use App\Http\Requests\{{model}}\Update{{model}}Request;
use App\Services\BreadcrumbService;
use App\Services\{{model}}Service;
use App\Traits\AtualizaFiltrosTrait;
use Illuminate\Http\Request;
use App\Traits\FiltroTrait;

class {{model}}Controller extends BaseController implements FiltroInterface, ResourceInterface
{
    use FiltroTrait;
    use AtualizaFiltrosTrait;
    protected ${{modelLower}}Service;
    protected $breadcrumbService;

    public function __construct({{model}}Service ${{modelLower}}Service, BreadcrumbService $breadcrumbService)
    {
        $this->titulo = "{{modelPlural}}";
        $this->nomeFiltro = '{{modelLower}}';
        $this->{{modelLower}}Service = ${{modelLower}}Service;
        $this->breadcrumbService = $breadcrumbService;
    }

    public function index()
    {
        $this->configurarSessao();

        $itensFiltered = session("$this->nomeFiltro.filtro", []);
        $perPage = session()->get("$this->nomeFiltro.perPage", 10);

        ${{modelPluralLower}} = $this->{{modelLower}}Service->getAllWithFiltersAndPagination($itensFiltered, $perPage);

        $breadcrumb = $this->breadcrumbService->prepararBreadcrumbIndex('{{modelPlural}}');
        $filters = $this->obterFiltrosPrincipais();
        $additionalFilters = $this->obterFiltrosSecundarios();

        $this->atualizarFiltros($itensFiltered, $filters);
        $this->atualizarFiltros($itensFiltered, $additionalFilters);

        $perPages = [5, 10, 15, 25, 50, 100];

        return view('{{modelLower}}.index', compact(
            '{{modelPluralLower}}',
            'breadcrumb',
            'filters',
            'itensFiltered',
            'additionalFilters',
            'perPages',
            'perPage'
        ))->with('titulo', $this->titulo);
    }

    public function create()
    {
        $status = [
            'S' => 'Ativo',
            'N' => 'Inativo'
        ];
        $breadcrumb = $this->breadcrumbService->prepararBreadcrumbCreate('{{modelPlural}}','{{modelLower}}.index','Criar');

        [$metodo,$rota] = $this->getFormMethodAndRoute();
        return view('{{modelLower}}.add-edit', compact('breadcrumb','status','metodo','rota'))->with('titulo', $this->titulo);
    }

    public function store(Store{{model}}Request $request)
    {
        $this->{{modelLower}}Service->create($request->all());

        return $this->redirecionaRotaRedirect($this->nomeFiltro);
    }

    public function edit($id)
    {
        ${{modelLower}} = $this->{{modelLower}}Service->getById($id);
        $status = [
            'S' => 'Ativo',
            'N' => 'Inativo'
        ];
        $breadcrumb = $this->breadcrumbService->prepararBreadcrumbEdit('{{modelPlural}}','{{modelLower}}.index',"Editar: ${{modelLower}}->nome");
        [$metodo,$rota] = $this->getFormMethodAndRoute(${{modelLower}});

        return view('{{modelLower}}.add-edit', compact('{{modelLower}}','breadcrumb','status','metodo','rota'))->with('titulo', $this->titulo);
    }

    public function update(Update{{model}}Request $request, $id)
    {
        $success = $this->{{modelLower}}Service->update($id,$request->all());
        return $this->redirecionaRotaRedirect($this->nomeFiltro);
    }

    public function destroy($id)
    {
        $success = $this->{{modelLower}}Service->delete($id);
        return $this->redirecionaRotaRedirect($this->nomeFiltro);
    }

    public function filtro(Request $request)
    {
        $this->criarFiltros($request, $this->nomeFiltro);
        return $this->redirecionaRotaRedirect($this->nomeFiltro);
    }

    public function removerFiltro(Request $request)
    {
        $atributo = $request->input('atributo') ?? null;
        $this->removeSessao($this->nomeFiltro, $atributo);
        return $this->redirecionaRotaRedirect($this->nomeFiltro);
    }

    public function setPerPage(Request $request)
    {
        $request->session()->put("$this->nomeFiltro.perPage", $request->input('perPage'));
        return $this->redirecionaRotaRedirect($this->nomeFiltro);
    }

    public function configurarSessao()
    {
        session()->put("$this->nomeFiltro.urlPadrao", '{{modelLower}}');
        session()->put("$this->nomeFiltro.rotaRedirect", '{{modelLower}}.index');
    }

    public function obterFiltrosPrincipais()
    {
        return [
            ['name' => 'nome', 'label' => 'Nome', 'type' => 'text', 'typeWhere' => 'like'],
            ['name' => 'ativo', 'label' => 'Status', 'type' => 'select', 'typeWhere' => 'where', 'options' => [
                ['value' => '', 'label' => 'Selecione o status', 'selected' => false],
                ['value' => 'S', 'label' => 'Ativo', 'selected' => false],
                ['value' => 'N', 'label' => 'Inativo', 'selected' => false]
            ]]
        ];
    }

    public function obterFiltrosSecundarios()
    {
        return [
            // Adicione filtros secundários aqui, se necessário
        ];
    }

    private function getFormMethodAndRoute(${{modelLower}} = null)
    {
        if (${{modelLower}}) {
            return [
                'PUT',
                route('{{modelLower}}.update', ${{modelLower}}->id),
            ];
        }

        return [
            'POST',
            route('{{modelLower}}.store'),
        ];
    }
}